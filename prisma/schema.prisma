// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

// Local SQLite database
// datasource db {
//   provider = "sqlite"
//   url      = env("DATABASE_URL")
// }

// Vercel database
datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum UserRoleType {
  admin
  user
}

enum DiscountType {
  percentage
  fixed
}

enum DeliveryType {
  fast
  slow
}

enum FontType {
  latin
  cyrillic
}

enum OrderDeliveryType {
  delivery
  pickup
}

enum OrderPaymentType {
  onDelivery
  card
  ips
  bankTransfer
}

enum OrderStatusType {
  pending
  processing
  shipped
  delivered
  canceled
}

enum DeliveryAddressType {
  delivery
  billing
}

// Category
model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  active    Boolean   @default(false)
  image     Media?
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("categories")
}

// Package
model PackageOption {
  id          String    @id @default(cuid())
  name        String    @unique
  description String
  price       Int
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("package_options")
}

// DeliveryService
model DeliveryService {
  id               String   @id @default(cuid())
  name             String   @unique
  link             String
  pdf              Media?
  active           Boolean  @default(false)
  predefinedPrices Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("delivery_services")
}

// Banner
model Banner {
  id        String   @id @default(cuid())
  name      String
  link      String
  image     Media?
  active    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("banners")
}

// Coupon
model Coupon {
  id           String       @id @default(cuid())
  name         String
  code         String       @unique
  carts        Cart[]
  discountType DiscountType
  discount     Int
  cartValue    Int
  available    Int
  used         Int          @default(0)
  active       Boolean      @default(false)
  expiresAt    DateTime
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@map("coupons")
}

// DeliveryFee
model DeliveryFee {
  id         String       @id @default(cuid())
  name       String
  fee        Int
  priceRange PriceRange[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@map("delivery_fees")
}

// PriceRange
model PriceRange {
  id            String      @id @default(cuid())
  from          Int
  to            Int
  price         Int
  deliveryFee   DeliveryFee @relation(fields: [deliveryFeeId], references: [id])
  deliveryFeeId String
  product       Product?    @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId     String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("price_ranges")
}

// Discount
model Discount {
  id         String    @id @default(cuid())
  name       String    @unique
  percentage Int
  active     Boolean   @default(false)
  products   Product[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("discounts")
}

// Text personalization field
model TextPersonalizationField {
  id          String   @id @default(cuid())
  name        String
  placeholder String
  product     Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("text_personalization_fields")
}

// Image personalization field
model ImagePersonalizationField {
  id        String   @id @default(cuid())
  name      String
  min       Int
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("image_personalization_fields")
}

// Product
model Product {
  id                         String                      @id @default(cuid())
  name                       String
  categories                 Category[]
  code                       String                      @unique
  priceTable                 PriceRange[]
  price                      Int
  discount                   Discount?                   @relation(fields: [discountId], references: [id])
  discountId                 String?
  material                   String
  dimensions                 String
  personalization            String
  description                String
  delivery                   DeliveryType
  inStock                    Boolean                     @default(true)
  packageOption              PackageOption?              @relation(fields: [packageOptionId], references: [id])
  packageOptionId            String?
  coverImage                 Media?                      @relation("CoverImageRelation")
  images                     Media[]                     @relation("ImagesRelation")
  imagePersonalizationFields ImagePersonalizationField[]
  textPersonalizationFields  TextPersonalizationField[]
  cartItems                  CartItem[]
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt

  @@map("products")
}

// Media
model Media {
  id                     String                @id @default(cuid())
  name                   String
  key                    String                @unique
  type                   String
  url                    String                @unique
  user                   User?                 @relation(fields: [userId], references: [id])
  userId                 String?
  category               Category?             @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId             String?               @unique
  banner                 Banner?               @relation(fields: [bannerId], references: [id], onDelete: Cascade)
  bannerId               String?               @unique
  deliveryService        DeliveryService?      @relation(fields: [deliveryServiceId], references: [id], onDelete: Cascade)
  deliveryServiceId      String?               @unique
  productCover           Product?              @relation("CoverImageRelation", fields: [productCoverId], references: [id], onDelete: Cascade)
  productCoverId         String?               @unique
  productImages          Product?              @relation("ImagesRelation", fields: [productImagesId], references: [id], onDelete: Cascade)
  productImagesId        String?
  imagePersonalization   ImagePersonalization? @relation("ImagePersonalizationRelation", fields: [imagePersonalizationId], references: [id], onDelete: Cascade)
  imagePersonalizationId String?
  updatedAt              DateTime              @updatedAt
  createdAt              DateTime              @default(now())

  @@map("medias")
}

model Cart {
  id                        String     @id @default(cuid())
  user                      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                    String     @unique
  items                     CartItem[]
  onlinePrice               Int
  totalPrice                Int
  deliveryFee               Int
  totalPriceWithDeliveryFee Int
  discount                  Int
  coupon                    Coupon?    @relation(fields: [couponId], references: [id])
  couponId                  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("carts")
}

model CartItem {
  id                    String                 @id @default(cuid())
  cart                  Cart                   @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId                String
  product               Product                @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId             String
  price                 Int
  deliveryFee           Int
  quantity              Int
  fontType              FontType
  textPersonalizations  TextPersonalization[]
  imagePersonalizations ImagePersonalization[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cart_items")
}

// Text personalization
model TextPersonalization {
  id         String    @id @default(cuid())
  name       String
  value      String
  cartItem   CartItem? @relation(fields: [cartItemId], references: [id], onDelete: Cascade)
  cartItemId String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("text_personalizations")
}

// Image personalization
model ImagePersonalization {
  id         String    @id @default(cuid())
  name       String
  images     Media[]   @relation("ImagePersonalizationRelation")
  cartItem   CartItem? @relation(fields: [cartItemId], references: [id], onDelete: Cascade)
  cartItemId String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("image_personalizations")
}

// Delivery address
model DeliveryAddress {
  id        String              @id @default(cuid())
  name      String
  address   String
  city      String
  zip       String
  phone     String
  email     String
  note      String?
  type      DeliveryAddressType
  user      User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  @@map("delivery_addresses")
}

// Order
model Order {
  id           String            @id @default(cuid())
  orderNumber  Int               @unique
  deliveryType OrderDeliveryType
  paymentType  OrderPaymentType
  status       OrderStatusType   @default(pending)
  mediaRemoved Boolean           @default(false)

  cart Json

  deliveryName    String @default("")
  deliveryAddress String @default("")
  deliveryCity    String @default("")
  deliveryZip     String @default("")
  deliveryPhone   String @default("")
  deliveryEmail   String @default("")
  deliveryNote    String @default("")

  pickupName  String @default("")
  pickupPhone String @default("")
  pickupEmail String @default("")

  billingName    String @default("")
  billingAddress String @default("")
  billingCity    String @default("")
  billingZip     String @default("")
  billingPhone   String @default("")
  billingEmail   String @default("")
  billingNote    String @default("")

  deliveryServiceName String @default("")

  orderOnlinePrice Int
  orderDiscount    Int
  orderDeliveryFee Int
  orderTotalPrice  Int

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}

// Auth
model User {
  id                String            @id @default(cuid())
  name              String?
  email             String            @unique
  emailVerified     DateTime?
  image             String?
  role              UserRoleType      @default(user)
  media             Media[]
  cart              Cart?
  deliveryAddresses DeliveryAddress[]
  orders            Order[]
  accounts          Account[]
  sessions          Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}
