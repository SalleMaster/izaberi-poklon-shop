// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

// Local SQLite database
// datasource db {
//   provider = "sqlite"
//   url      = env("DATABASE_URL")
// }

// Vercel database
datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// Category
model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  active    Boolean   @default(false)
  image     Media?
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("categories")
}

// DeliveryService
model DeliveryService {
  id        String   @id @default(cuid())
  name      String   @unique
  link      String
  pdf       Media?
  active    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("delivery_services")
}

// Discount
model Discount {
  id         String    @id @default(cuid())
  name       String    @unique
  percentage Int
  active     Boolean   @default(false)
  products   Product[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("discounts")
}

// Text personalization field
model TextPersonalizationField {
  id          String   @id @default(cuid())
  name        String
  placeholder String
  product     Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("text_personalization_fields")
}

// Image personalization field
model ImagePersonalizationField {
  id        String   @id @default(cuid())
  name      String
  min       Int
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("image_personalization_fields")
}

// Product
model Product {
  id                         String                      @id @default(cuid())
  name                       String
  categories                 Category[]
  code                       String                      @unique
  price                      Int
  discount                   Discount?                   @relation(fields: [discountId], references: [id])
  discountId                 String?
  material                   String
  dimensions                 String
  personalization            String
  description                String
  delivery                   String
  inStock                    Boolean                     @default(true)
  coverImage                 Media?                      @relation("CoverImageRelation")
  images                     Media[]                     @relation("ImagesRelation")
  imagePersonalizationFields ImagePersonalizationField[]
  textPersonalizationFields  TextPersonalizationField[]
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt

  @@map("products")
}

// Media
model Media {
  id                String           @id @default(cuid())
  name              String
  key               String           @unique
  type              String
  url               String           @unique
  user              User?            @relation(fields: [userId], references: [id])
  userId            String?
  category          Category?        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId        String?          @unique
  deliveryService   DeliveryService? @relation(fields: [deliveryServiceId], references: [id], onDelete: Cascade)
  deliveryServiceId String?          @unique
  productCover      Product?         @relation("CoverImageRelation", fields: [productCoverId], references: [id], onDelete: Cascade)
  productCoverId    String?          @unique
  productImages     Product?         @relation("ImagesRelation", fields: [productImagesId], references: [id], onDelete: Cascade)
  productImagesId   String?
  updatedAt         DateTime         @updatedAt
  createdAt         DateTime         @default(now())

  @@map("medias")
}

// Auth
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String?   @default("user")
  media         Media[]
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}
