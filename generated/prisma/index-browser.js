
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.1
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.1",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  active: 'active',
  special: 'special',
  position: 'position',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PackageOptionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  price: 'price',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DeliveryServiceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  link: 'link',
  active: 'active',
  predefinedPrices: 'predefinedPrices',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BannerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  link: 'link',
  active: 'active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CouponScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  discountType: 'discountType',
  discount: 'discount',
  cartValue: 'cartValue',
  available: 'available',
  used: 'used',
  active: 'active',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DeliveryFeeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  fee: 'fee',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PriceRangeScalarFieldEnum = {
  id: 'id',
  from: 'from',
  to: 'to',
  price: 'price',
  deliveryFeeId: 'deliveryFeeId',
  productId: 'productId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DiscountScalarFieldEnum = {
  id: 'id',
  name: 'name',
  percentage: 'percentage',
  active: 'active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TextPersonalizationFieldScalarFieldEnum = {
  id: 'id',
  name: 'name',
  placeholder: 'placeholder',
  productId: 'productId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ImagePersonalizationFieldScalarFieldEnum = {
  id: 'id',
  name: 'name',
  min: 'min',
  max: 'max',
  productId: 'productId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  price: 'price',
  discountId: 'discountId',
  material: 'material',
  dimensions: 'dimensions',
  personalization: 'personalization',
  description: 'description',
  delivery: 'delivery',
  inStock: 'inStock',
  trending: 'trending',
  packageOptionId: 'packageOptionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RatingScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  productId: 'productId',
  name: 'name',
  score: 'score',
  comment: 'comment',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MediaScalarFieldEnum = {
  id: 'id',
  name: 'name',
  key: 'key',
  type: 'type',
  url: 'url',
  userId: 'userId',
  categoryId: 'categoryId',
  deliveryServiceId: 'deliveryServiceId',
  desktopBannerImageId: 'desktopBannerImageId',
  mobileBannerImageId: 'mobileBannerImageId',
  productCoverId: 'productCoverId',
  productImagesId: 'productImagesId',
  imagePersonalizationId: 'imagePersonalizationId',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt'
};

exports.Prisma.CartScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  onlinePrice: 'onlinePrice',
  totalPrice: 'totalPrice',
  deliveryFee: 'deliveryFee',
  totalPriceWithDeliveryFee: 'totalPriceWithDeliveryFee',
  discount: 'discount',
  couponId: 'couponId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CartItemScalarFieldEnum = {
  id: 'id',
  cartId: 'cartId',
  productId: 'productId',
  price: 'price',
  deliveryFee: 'deliveryFee',
  quantity: 'quantity',
  fontType: 'fontType',
  packageOptionSelected: 'packageOptionSelected',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TextPersonalizationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  value: 'value',
  cartItemId: 'cartItemId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ImagePersonalizationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  cartItemId: 'cartItemId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DeliveryAddressScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address',
  city: 'city',
  zip: 'zip',
  phone: 'phone',
  email: 'email',
  note: 'note',
  type: 'type',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  orderNumber: 'orderNumber',
  termsAccepted: 'termsAccepted',
  shippingNumber: 'shippingNumber',
  deliveryType: 'deliveryType',
  paymentType: 'paymentType',
  status: 'status',
  mediaRemoved: 'mediaRemoved',
  paymentId: 'paymentId',
  paymentStatus: 'paymentStatus',
  paymentAuthorizationCode: 'paymentAuthorizationCode',
  paymentStatusCode: 'paymentStatusCode',
  paymentTimestamp: 'paymentTimestamp',
  paymentAmount: 'paymentAmount',
  paymentCurrency: 'paymentCurrency',
  paymentBrand: 'paymentBrand',
  paymentDetails: 'paymentDetails',
  checkoutId: 'checkoutId',
  cart: 'cart',
  deliveryName: 'deliveryName',
  deliveryAddress: 'deliveryAddress',
  deliveryCity: 'deliveryCity',
  deliveryZip: 'deliveryZip',
  deliveryPhone: 'deliveryPhone',
  deliveryEmail: 'deliveryEmail',
  deliveryNote: 'deliveryNote',
  pickupName: 'pickupName',
  pickupPhone: 'pickupPhone',
  pickupEmail: 'pickupEmail',
  billingName: 'billingName',
  billingAddress: 'billingAddress',
  billingCity: 'billingCity',
  billingZip: 'billingZip',
  billingPhone: 'billingPhone',
  billingEmail: 'billingEmail',
  billingNote: 'billingNote',
  deliveryServiceName: 'deliveryServiceName',
  orderOnlinePrice: 'orderOnlinePrice',
  orderDiscount: 'orderDiscount',
  orderDeliveryFee: 'orderDeliveryFee',
  orderTotalPrice: 'orderTotalPrice',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  phone: 'phone',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  banned: 'banned',
  banReason: 'banReason',
  banExpires: 'banExpires'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  scope: 'scope',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  accountId: 'accountId',
  providerId: 'providerId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  idToken: 'idToken',
  accessTokenExpiresAt: 'accessTokenExpiresAt',
  refreshTokenExpiresAt: 'refreshTokenExpiresAt',
  password: 'password'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  expiresAt: 'expiresAt',
  token: 'token',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  impersonatedBy: 'impersonatedBy'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.VerificationScalarFieldEnum = {
  id: 'id',
  identifier: 'identifier',
  value: 'value',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.DiscountType = exports.$Enums.DiscountType = {
  percentage: 'percentage',
  fixed: 'fixed'
};

exports.DeliveryType = exports.$Enums.DeliveryType = {
  fast: 'fast',
  slow: 'slow'
};

exports.RatingStatusType = exports.$Enums.RatingStatusType = {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected'
};

exports.FontType = exports.$Enums.FontType = {
  latin: 'latin',
  cyrillic: 'cyrillic'
};

exports.DeliveryAddressType = exports.$Enums.DeliveryAddressType = {
  delivery: 'delivery',
  billing: 'billing'
};

exports.OrderDeliveryType = exports.$Enums.OrderDeliveryType = {
  delivery: 'delivery',
  pickup: 'pickup'
};

exports.OrderPaymentType = exports.$Enums.OrderPaymentType = {
  onDelivery: 'onDelivery',
  card: 'card',
  ips: 'ips',
  bankTransfer: 'bankTransfer'
};

exports.OrderStatusType = exports.$Enums.OrderStatusType = {
  draft: 'draft',
  pending: 'pending',
  processing: 'processing',
  shipped: 'shipped',
  delivered: 'delivered',
  canceled: 'canceled'
};

exports.OrderPaymentStatusType = exports.$Enums.OrderPaymentStatusType = {
  pending: 'pending',
  success: 'success',
  failed: 'failed'
};

exports.UserRoleType = exports.$Enums.UserRoleType = {
  admin: 'admin',
  user: 'user'
};

exports.Prisma.ModelName = {
  Category: 'Category',
  PackageOption: 'PackageOption',
  DeliveryService: 'DeliveryService',
  Banner: 'Banner',
  Coupon: 'Coupon',
  DeliveryFee: 'DeliveryFee',
  PriceRange: 'PriceRange',
  Discount: 'Discount',
  TextPersonalizationField: 'TextPersonalizationField',
  ImagePersonalizationField: 'ImagePersonalizationField',
  Product: 'Product',
  Rating: 'Rating',
  Media: 'Media',
  Cart: 'Cart',
  CartItem: 'CartItem',
  TextPersonalization: 'TextPersonalization',
  ImagePersonalization: 'ImagePersonalization',
  DeliveryAddress: 'DeliveryAddress',
  Order: 'Order',
  User: 'User',
  Account: 'Account',
  Session: 'Session',
  VerificationToken: 'VerificationToken',
  Verification: 'Verification'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
